// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.1
// source: lingua-protos/user_data.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserDataService_GetUserData_FullMethodName             = "/lingua.UserDataService/GetUserData"
	UserDataService_UpdateXP_FullMethodName                = "/lingua.UserDataService/UpdateXP"
	UserDataService_UpdateDailyStreak_FullMethodName       = "/lingua.UserDataService/UpdateDailyStreak"
	UserDataService_UpdateWinningPercentage_FullMethodName = "/lingua.UserDataService/UpdateWinningPercentage"
	UserDataService_GetLeadBoard_FullMethodName            = "/lingua.UserDataService/GetLeadBoard"
)

// UserDataServiceClient is the client API for UserDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataServiceClient interface {
	GetUserData(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*UserDataGRes, error)
	UpdateXP(ctx context.Context, in *XPUReq, opts ...grpc.CallOption) (*Void, error)
	UpdateDailyStreak(ctx context.Context, in *StreakUReq, opts ...grpc.CallOption) (*Void, error)
	UpdateWinningPercentage(ctx context.Context, in *WinningPercentageUReq, opts ...grpc.CallOption) (*Void, error)
	GetLeadBoard(ctx context.Context, in *Void, opts ...grpc.CallOption) (*LeadboardRes, error)
}

type userDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataServiceClient(cc grpc.ClientConnInterface) UserDataServiceClient {
	return &userDataServiceClient{cc}
}

func (c *userDataServiceClient) GetUserData(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*UserDataGRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDataGRes)
	err := c.cc.Invoke(ctx, UserDataService_GetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) UpdateXP(ctx context.Context, in *XPUReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserDataService_UpdateXP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) UpdateDailyStreak(ctx context.Context, in *StreakUReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserDataService_UpdateDailyStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) UpdateWinningPercentage(ctx context.Context, in *WinningPercentageUReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserDataService_UpdateWinningPercentage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) GetLeadBoard(ctx context.Context, in *Void, opts ...grpc.CallOption) (*LeadboardRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeadboardRes)
	err := c.cc.Invoke(ctx, UserDataService_GetLeadBoard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServiceServer is the server API for UserDataService service.
// All implementations must embed UnimplementedUserDataServiceServer
// for forward compatibility
type UserDataServiceServer interface {
	GetUserData(context.Context, *ByID) (*UserDataGRes, error)
	UpdateXP(context.Context, *XPUReq) (*Void, error)
	UpdateDailyStreak(context.Context, *StreakUReq) (*Void, error)
	UpdateWinningPercentage(context.Context, *WinningPercentageUReq) (*Void, error)
	GetLeadBoard(context.Context, *Void) (*LeadboardRes, error)
	mustEmbedUnimplementedUserDataServiceServer()
}

// UnimplementedUserDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataServiceServer struct {
}

func (UnimplementedUserDataServiceServer) GetUserData(context.Context, *ByID) (*UserDataGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedUserDataServiceServer) UpdateXP(context.Context, *XPUReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateXP not implemented")
}
func (UnimplementedUserDataServiceServer) UpdateDailyStreak(context.Context, *StreakUReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailyStreak not implemented")
}
func (UnimplementedUserDataServiceServer) UpdateWinningPercentage(context.Context, *WinningPercentageUReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWinningPercentage not implemented")
}
func (UnimplementedUserDataServiceServer) GetLeadBoard(context.Context, *Void) (*LeadboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeadBoard not implemented")
}
func (UnimplementedUserDataServiceServer) mustEmbedUnimplementedUserDataServiceServer() {}

// UnsafeUserDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataServiceServer will
// result in compilation errors.
type UnsafeUserDataServiceServer interface {
	mustEmbedUnimplementedUserDataServiceServer()
}

func RegisterUserDataServiceServer(s grpc.ServiceRegistrar, srv UserDataServiceServer) {
	s.RegisterService(&UserDataService_ServiceDesc, srv)
}

func _UserDataService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).GetUserData(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_UpdateXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XPUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).UpdateXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_UpdateXP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).UpdateXP(ctx, req.(*XPUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_UpdateDailyStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreakUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).UpdateDailyStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_UpdateDailyStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).UpdateDailyStreak(ctx, req.(*StreakUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_UpdateWinningPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinningPercentageUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).UpdateWinningPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_UpdateWinningPercentage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).UpdateWinningPercentage(ctx, req.(*WinningPercentageUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_GetLeadBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).GetLeadBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_GetLeadBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).GetLeadBoard(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataService_ServiceDesc is the grpc.ServiceDesc for UserDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lingua.UserDataService",
	HandlerType: (*UserDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserData",
			Handler:    _UserDataService_GetUserData_Handler,
		},
		{
			MethodName: "UpdateXP",
			Handler:    _UserDataService_UpdateXP_Handler,
		},
		{
			MethodName: "UpdateDailyStreak",
			Handler:    _UserDataService_UpdateDailyStreak_Handler,
		},
		{
			MethodName: "UpdateWinningPercentage",
			Handler:    _UserDataService_UpdateWinningPercentage_Handler,
		},
		{
			MethodName: "GetLeadBoard",
			Handler:    _UserDataService_GetLeadBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lingua-protos/user_data.proto",
}
