// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.1
// source: lingua-protos/exercise.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExerciseService_CreateExercise_FullMethodName  = "/lingua.ExerciseService/CreateExercise"
	ExerciseService_GetExerciseByID_FullMethodName = "/lingua.ExerciseService/GetExerciseByID"
	ExerciseService_UpdateExercise_FullMethodName  = "/lingua.ExerciseService/UpdateExercise"
	ExerciseService_DeleteExercise_FullMethodName  = "/lingua.ExerciseService/DeleteExercise"
	ExerciseService_GetAllExercises_FullMethodName = "/lingua.ExerciseService/GetAllExercises"
)

// ExerciseServiceClient is the client API for ExerciseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseServiceClient interface {
	CreateExercise(ctx context.Context, in *ExerciseCReqUReqForSwagger, opts ...grpc.CallOption) (*Void, error)
	GetExerciseByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*ExerciseGResUReq, error)
	UpdateExercise(ctx context.Context, in *ExerciseGResUReq, opts ...grpc.CallOption) (*Void, error)
	DeleteExercise(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error)
	GetAllExercises(ctx context.Context, in *ExerciseGAReq, opts ...grpc.CallOption) (*ExerciseGARes, error)
}

type exerciseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseServiceClient(cc grpc.ClientConnInterface) ExerciseServiceClient {
	return &exerciseServiceClient{cc}
}

func (c *exerciseServiceClient) CreateExercise(ctx context.Context, in *ExerciseCReqUReqForSwagger, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ExerciseService_CreateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) GetExerciseByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*ExerciseGResUReq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExerciseGResUReq)
	err := c.cc.Invoke(ctx, ExerciseService_GetExerciseByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) UpdateExercise(ctx context.Context, in *ExerciseGResUReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ExerciseService_UpdateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) DeleteExercise(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ExerciseService_DeleteExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) GetAllExercises(ctx context.Context, in *ExerciseGAReq, opts ...grpc.CallOption) (*ExerciseGARes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExerciseGARes)
	err := c.cc.Invoke(ctx, ExerciseService_GetAllExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseServiceServer is the server API for ExerciseService service.
// All implementations must embed UnimplementedExerciseServiceServer
// for forward compatibility
type ExerciseServiceServer interface {
	CreateExercise(context.Context, *ExerciseCReqUReqForSwagger) (*Void, error)
	GetExerciseByID(context.Context, *ByID) (*ExerciseGResUReq, error)
	UpdateExercise(context.Context, *ExerciseGResUReq) (*Void, error)
	DeleteExercise(context.Context, *ByID) (*Void, error)
	GetAllExercises(context.Context, *ExerciseGAReq) (*ExerciseGARes, error)
	mustEmbedUnimplementedExerciseServiceServer()
}

// UnimplementedExerciseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExerciseServiceServer struct {
}

func (UnimplementedExerciseServiceServer) CreateExercise(context.Context, *ExerciseCReqUReqForSwagger) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
}
func (UnimplementedExerciseServiceServer) GetExerciseByID(context.Context, *ByID) (*ExerciseGResUReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseByID not implemented")
}
func (UnimplementedExerciseServiceServer) UpdateExercise(context.Context, *ExerciseGResUReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedExerciseServiceServer) DeleteExercise(context.Context, *ByID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedExerciseServiceServer) GetAllExercises(context.Context, *ExerciseGAReq) (*ExerciseGARes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExercises not implemented")
}
func (UnimplementedExerciseServiceServer) mustEmbedUnimplementedExerciseServiceServer() {}

// UnsafeExerciseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExerciseServiceServer will
// result in compilation errors.
type UnsafeExerciseServiceServer interface {
	mustEmbedUnimplementedExerciseServiceServer()
}

func RegisterExerciseServiceServer(s grpc.ServiceRegistrar, srv ExerciseServiceServer) {
	s.RegisterService(&ExerciseService_ServiceDesc, srv)
}

func _ExerciseService_CreateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseCReqUReqForSwagger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_CreateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).CreateExercise(ctx, req.(*ExerciseCReqUReqForSwagger))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_GetExerciseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).GetExerciseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_GetExerciseByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).GetExerciseByID(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseGResUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_UpdateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).UpdateExercise(ctx, req.(*ExerciseGResUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_DeleteExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).DeleteExercise(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_GetAllExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseGAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).GetAllExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_GetAllExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).GetAllExercises(ctx, req.(*ExerciseGAReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExerciseService_ServiceDesc is the grpc.ServiceDesc for ExerciseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExerciseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lingua.ExerciseService",
	HandlerType: (*ExerciseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExercise",
			Handler:    _ExerciseService_CreateExercise_Handler,
		},
		{
			MethodName: "GetExerciseByID",
			Handler:    _ExerciseService_GetExerciseByID_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _ExerciseService_UpdateExercise_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _ExerciseService_DeleteExercise_Handler,
		},
		{
			MethodName: "GetAllExercises",
			Handler:    _ExerciseService_GetAllExercises_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lingua-protos/exercise.proto",
}
