// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.1
// source: lingua-protos/lesson.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LessonService_CreateLesson_FullMethodName  = "/lingua.LessonService/CreateLesson"
	LessonService_GetLessonByID_FullMethodName = "/lingua.LessonService/GetLessonByID"
	LessonService_UpdateLesson_FullMethodName  = "/lingua.LessonService/UpdateLesson"
	LessonService_DeleteLesson_FullMethodName  = "/lingua.LessonService/DeleteLesson"
	LessonService_GetAllLessons_FullMethodName = "/lingua.LessonService/GetAllLessons"
)

// LessonServiceClient is the client API for LessonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonServiceClient interface {
	CreateLesson(ctx context.Context, in *LessonCReqGRes, opts ...grpc.CallOption) (*Void, error)
	GetLessonByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*LessonCReqGRes, error)
	UpdateLesson(ctx context.Context, in *LessonUReq, opts ...grpc.CallOption) (*Void, error)
	DeleteLesson(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error)
	GetAllLessons(ctx context.Context, in *LessonGAReq, opts ...grpc.CallOption) (*LessonGARes, error)
}

type lessonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonServiceClient(cc grpc.ClientConnInterface) LessonServiceClient {
	return &lessonServiceClient{cc}
}

func (c *lessonServiceClient) CreateLesson(ctx context.Context, in *LessonCReqGRes, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, LessonService_CreateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetLessonByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*LessonCReqGRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LessonCReqGRes)
	err := c.cc.Invoke(ctx, LessonService_GetLessonByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) UpdateLesson(ctx context.Context, in *LessonUReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, LessonService_UpdateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) DeleteLesson(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, LessonService_DeleteLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetAllLessons(ctx context.Context, in *LessonGAReq, opts ...grpc.CallOption) (*LessonGARes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LessonGARes)
	err := c.cc.Invoke(ctx, LessonService_GetAllLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServiceServer is the server API for LessonService service.
// All implementations must embed UnimplementedLessonServiceServer
// for forward compatibility
type LessonServiceServer interface {
	CreateLesson(context.Context, *LessonCReqGRes) (*Void, error)
	GetLessonByID(context.Context, *ByID) (*LessonCReqGRes, error)
	UpdateLesson(context.Context, *LessonUReq) (*Void, error)
	DeleteLesson(context.Context, *ByID) (*Void, error)
	GetAllLessons(context.Context, *LessonGAReq) (*LessonGARes, error)
	mustEmbedUnimplementedLessonServiceServer()
}

// UnimplementedLessonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServiceServer struct {
}

func (UnimplementedLessonServiceServer) CreateLesson(context.Context, *LessonCReqGRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLessonServiceServer) GetLessonByID(context.Context, *ByID) (*LessonCReqGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonByID not implemented")
}
func (UnimplementedLessonServiceServer) UpdateLesson(context.Context, *LessonUReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedLessonServiceServer) DeleteLesson(context.Context, *ByID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedLessonServiceServer) GetAllLessons(context.Context, *LessonGAReq) (*LessonGARes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLessons not implemented")
}
func (UnimplementedLessonServiceServer) mustEmbedUnimplementedLessonServiceServer() {}

// UnsafeLessonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServiceServer will
// result in compilation errors.
type UnsafeLessonServiceServer interface {
	mustEmbedUnimplementedLessonServiceServer()
}

func RegisterLessonServiceServer(s grpc.ServiceRegistrar, srv LessonServiceServer) {
	s.RegisterService(&LessonService_ServiceDesc, srv)
}

func _LessonService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonCReqGRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_CreateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).CreateLesson(ctx, req.(*LessonCReqGRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetLessonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetLessonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetLessonByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetLessonByID(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_UpdateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).UpdateLesson(ctx, req.(*LessonUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_DeleteLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).DeleteLesson(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetAllLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonGAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetAllLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetAllLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetAllLessons(ctx, req.(*LessonGAReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LessonService_ServiceDesc is the grpc.ServiceDesc for LessonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LessonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lingua.LessonService",
	HandlerType: (*LessonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLesson",
			Handler:    _LessonService_CreateLesson_Handler,
		},
		{
			MethodName: "GetLessonByID",
			Handler:    _LessonService_GetLessonByID_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _LessonService_UpdateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _LessonService_DeleteLesson_Handler,
		},
		{
			MethodName: "GetAllLessons",
			Handler:    _LessonService_GetAllLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lingua-protos/lesson.proto",
}
