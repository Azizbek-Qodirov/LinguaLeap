// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.1
// source: lingua-protos/vocabulary.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VocabularyService_AddToVocabulary_FullMethodName      = "/lingua.VocabularyService/AddToVocabulary"
	VocabularyService_DeleteFromVocabulary_FullMethodName = "/lingua.VocabularyService/DeleteFromVocabulary"
	VocabularyService_GetVocabularies_FullMethodName      = "/lingua.VocabularyService/GetVocabularies"
)

// VocabularyServiceClient is the client API for VocabularyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VocabularyServiceClient interface {
	AddToVocabulary(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error)
	DeleteFromVocabulary(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error)
	GetVocabularies(ctx context.Context, in *VocabulariesGAReq, opts ...grpc.CallOption) (*VocabulariesGARes, error)
}

type vocabularyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocabularyServiceClient(cc grpc.ClientConnInterface) VocabularyServiceClient {
	return &vocabularyServiceClient{cc}
}

func (c *vocabularyServiceClient) AddToVocabulary(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, VocabularyService_AddToVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) DeleteFromVocabulary(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, VocabularyService_DeleteFromVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) GetVocabularies(ctx context.Context, in *VocabulariesGAReq, opts ...grpc.CallOption) (*VocabulariesGARes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabulariesGARes)
	err := c.cc.Invoke(ctx, VocabularyService_GetVocabularies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VocabularyServiceServer is the server API for VocabularyService service.
// All implementations must embed UnimplementedVocabularyServiceServer
// for forward compatibility
type VocabularyServiceServer interface {
	AddToVocabulary(context.Context, *ByID) (*Void, error)
	DeleteFromVocabulary(context.Context, *ByID) (*Void, error)
	GetVocabularies(context.Context, *VocabulariesGAReq) (*VocabulariesGARes, error)
	mustEmbedUnimplementedVocabularyServiceServer()
}

// UnimplementedVocabularyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVocabularyServiceServer struct {
}

func (UnimplementedVocabularyServiceServer) AddToVocabulary(context.Context, *ByID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToVocabulary not implemented")
}
func (UnimplementedVocabularyServiceServer) DeleteFromVocabulary(context.Context, *ByID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromVocabulary not implemented")
}
func (UnimplementedVocabularyServiceServer) GetVocabularies(context.Context, *VocabulariesGAReq) (*VocabulariesGARes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabularies not implemented")
}
func (UnimplementedVocabularyServiceServer) mustEmbedUnimplementedVocabularyServiceServer() {}

// UnsafeVocabularyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocabularyServiceServer will
// result in compilation errors.
type UnsafeVocabularyServiceServer interface {
	mustEmbedUnimplementedVocabularyServiceServer()
}

func RegisterVocabularyServiceServer(s grpc.ServiceRegistrar, srv VocabularyServiceServer) {
	s.RegisterService(&VocabularyService_ServiceDesc, srv)
}

func _VocabularyService_AddToVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).AddToVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_AddToVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).AddToVocabulary(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_DeleteFromVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).DeleteFromVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_DeleteFromVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).DeleteFromVocabulary(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_GetVocabularies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabulariesGAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetVocabularies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_GetVocabularies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetVocabularies(ctx, req.(*VocabulariesGAReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VocabularyService_ServiceDesc is the grpc.ServiceDesc for VocabularyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocabularyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lingua.VocabularyService",
	HandlerType: (*VocabularyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToVocabulary",
			Handler:    _VocabularyService_AddToVocabulary_Handler,
		},
		{
			MethodName: "DeleteFromVocabulary",
			Handler:    _VocabularyService_DeleteFromVocabulary_Handler,
		},
		{
			MethodName: "GetVocabularies",
			Handler:    _VocabularyService_GetVocabularies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lingua-protos/vocabulary.proto",
}
